// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PremiumEvents.API.Data;

#nullable disable

namespace PremiumEvents.API.Migrations
{
    [DbContext(typeof(PremiumEventsDbContext))]
    [Migration("20240607124321_Add Image To Category Migration")]
    partial class AddImageToCategoryMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PremiumEvents.API.Models.Domain.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("PremiumEvents.API.Models.Domain.CityService", b =>
                {
                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CityId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("CityServices");
                });

            modelBuilder.Entity("PremiumEvents.API.Models.Domain.CityServiceCategory", b =>
                {
                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CityId", "ServiceCategoryId");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("CityServiceCategories");
                });

            modelBuilder.Entity("PremiumEvents.API.Models.Domain.County", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("PremiumEvents.API.Models.Domain.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");
                });

            modelBuilder.Entity("Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VideoPresentation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("PremiumEvents.API.Models.Domain.City", b =>
                {
                    b.HasOne("PremiumEvents.API.Models.Domain.County", "County")
                        .WithMany("City")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("County");
                });

            modelBuilder.Entity("PremiumEvents.API.Models.Domain.CityService", b =>
                {
                    b.HasOne("PremiumEvents.API.Models.Domain.City", "City")
                        .WithMany("CityServices")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service", "Service")
                        .WithMany("CityServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("PremiumEvents.API.Models.Domain.CityServiceCategory", b =>
                {
                    b.HasOne("PremiumEvents.API.Models.Domain.City", "City")
                        .WithMany("CityServiceCategories")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PremiumEvents.API.Models.Domain.ServiceCategory", "ServiceCategory")
                        .WithMany("CityServiceCategories")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("Service", b =>
                {
                    b.HasOne("PremiumEvents.API.Models.Domain.ServiceCategory", "ServiceCategory")
                        .WithMany("Services")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("PremiumEvents.API.Models.Domain.City", b =>
                {
                    b.Navigation("CityServiceCategories");

                    b.Navigation("CityServices");
                });

            modelBuilder.Entity("PremiumEvents.API.Models.Domain.County", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("PremiumEvents.API.Models.Domain.ServiceCategory", b =>
                {
                    b.Navigation("CityServiceCategories");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Service", b =>
                {
                    b.Navigation("CityServices");
                });
#pragma warning restore 612, 618
        }
    }
}
